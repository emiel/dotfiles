""
"" Plugins
""

call plug#begin('~/.vim/plugged')

""" Locate fzf plugin (brew, debian)
if filereadable("/usr/local/opt/fzf/plugin/fzf.vim")
  Plug '/usr/local/opt/fzf'
elseif filereadable("/usr/share/doc/fzf/examples/plugin/fzf.vim")
  Plug '/usr/share/doc/fzf/examples'
endif
" Plug 'NLKNguyen/papercolor-theme' " crashes with vim-lsp under Debian buster
Plug 'chrisbra/matchit'
Plug 'dense-analysis/ale'
Plug 'habamax/vim-polar'
Plug 'jparise/vim-graphql'
Plug 'junegunn/fzf.vim'
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'preservim/nerdtree'
Plug 'purescript-contrib/purescript-vim'
Plug 'rhysd/committia.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-surround'
call plug#end()

filetype plugin indent on

""
"" Global Options
""

set autoindent
set autoread
set backspace=indent,eol,start
set breakindent
set clipboard^=unnamed,unnamedplus
set completeopt=menuone,noinsert,noselect,preview "vim-lsp
set confirm
set copyindent
set cursorline
set encoding=utf-8
set formatoptions+=j
set hidden
set history=256
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set lazyredraw
set list
set listchars=tab:>·,trail:·,nbsp:~
set modelines=0
set mouse=a
set nobackup
set nojoinspaces
set path-=/usr/include
set preserveindent
set ruler
set scrolloff=3
set shell=zsh
set shortmess=atc
set showbreak=+++
set showcmd
set showmatch
set smartcase
set smarttab
set spelllang=en_us
set tags=tags;~
set termguicolors
set title
set ttyfast
set updatetime=1000
set visualbell
set wildcharm=<C-Z>
set wildignore+=*.o,*.pyc
set wildmenu
set wildmode=list:longest

" Prefer rg (ripgrep) over grep
if executable("rg")
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
  set grepformat=%f:%l:%c:%m
endif

""
"" Mappings
""

let mapleader = ','

" Remap , (Reverse last character-search command) to \ (default leader)
noremap \ ,

" Scroll the viewport faster
nnoremap <C-E> 4<C-E>
nnoremap <C-Y> 4<C-Y>
vnoremap <C-E> 4<C-E>
vnoremap <C-Y> 4<C-Y>

" Stop highlighting in addition to clearing and redrawing the screen.
nnoremap <C-L> :<C-U>nohlsearch<CR><C-L>

""
"" Completion mappings
""

" Completing file names
"inoremap <silent> <Leader>f <C-X><C-F>

" Completing keywords in the current and included files
"inoremap <silent> <Leader>i <C-X><C-I>

" Completing whole lines
"inoremap <silent> <Leader>l <C-X><C-L>

" Completing keywords in current file
"inoremap <silent> <Leader>n <C-X><C-N>

" Omni completion
"inoremap <silent> <Leader>o <C-X><C-O>

" Completing tags
"inoremap <silent> <Leader>t <C-X><C-]>

" User defined completion
"inoremap <silent> <Leader>u <C-X><C-U>

""
"" Mappings used frequently
""

nnoremap <Leader>stw :<C-U>call StripTrailingWhitespace()<CR>

" ALE
nnoremap <Leader>Af :ALEFix<CR>
nnoremap <silent> <C-k> <Plug>(ale_previous_wrap)
nnoremap <silent> <C-j> <Plug>(ale_next_wrap)

" fzf.vim
nnoremap <Leader>b :FzfBuffers<CR>
nnoremap <Leader>f :FzfFiles<CR>
nnoremap <Leader>g :FzfRg<SPACE>
nnoremap <Leader>h :FzfHelp<SPACE>
nnoremap <Leader>m :FzfMarks<CR>
nnoremap <Leader>t :FzfTags<CR>
nnoremap <silent>K :call SearchCurrentWordWithFzf()<CR>

" NERDTree
nnoremap <silent> <Leader>d :execute 'NERDTreeToggle ' . getcwd()<CR>

" Spell checking
nnoremap <Leader>s :set spell!<CR>

" Toggle pasting
nnoremap <Leader>p :set paste!<CR>:set paste?<CR>

""
"" File type triggers
""

" Jump to last position in file after opening. Nice!
autocmd BufReadPost *
\ if line("'\"") > 0 && line("'\"") <= line("$") |
\   exe "normal! g`\"" |
\ endif

""
"" Colors
""

let g:PaperColor_Theme_Options = {
  \   'theme': {
  \     'default': {
  \       'transparent_background': 1
  \     }
  \   }
  \ }

syntax on

colorscheme polar

""
"" Commands
""

" ctags
"command! MakeTags !ctags -R .

""
"" Plugin Configuration
""

"
" fzf.vim
"
let g:fzf_command_prefix = 'Fzf'

function! SearchCurrentWordWithFzf()
  execute 'FzfRg' expand('<cword>')
endfunction

if (executable('rg'))
  let $FZF_DEFAULT_COMMAND = 'rg --files'
endif

"
" ALE
"
let g:ale_completion_enabled = 0
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']

"
" NERDTree
"
let g:NERDTreeIgnore = ['^__pycache__$', '\~$']

"
" netrw
"
" let g:netrw_altv=1
" let g:netrw_banner=0
" let g:netrw_browse_split=4
" let g:netrw_list_hide=netrw_gitignore#Hide()
" let g:netrw_liststyle=3

"
" vim-lsp
"
let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_float_cursor = 1
let g:lsp_enable_lua = (has('lua') && has('patch-8.2.0775'))
let g:lsp_preview_float = has('patch-8.1.1517')

" let g:lsp_log_file = expand('~/vim-lsp.log')
" let g:lsp_log_verbose = 1

if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ })
endif

if executable('purescript-language-server')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'purescript',
        \ 'cmd': {server_info->
            \ [&shell, &shellcmdflag, 'purescript-language-server --stdio']},
        \ 'whitelist': ['purescript'],
        \ 'workspace_config': {
            \ 'purescript.addNpmPath': v:true,
            \ 'purescript.addSpagoSources': v:true,
            \ 'purescript.buildCommand': 'spago build --purs-args --json-errors'
        \ }
        \ })
endif

if executable('intelephense')
  augroup LspPHPIntelephense
    au!
    au User lsp_setup call lsp#register_server({
        \ 'name': 'intelephense',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'intelephense --stdio']},
        \ 'whitelist': ['php'],
        \ 'initialization_options': {'storagePath': '/tmp/intelephense'},
        \ 'workspace_config': {
        \   'intelephense': {
        \     'files': {
        \       'maxSize': 1000000,
        \       'associations': ['*.php', '*.phtml'],
        \       'exclude': [],
        \     },
        \     'completion': {
        \       'insertUseDeclaration': v:true,
        \       'fullyQualifyGlobalConstantsAndFunctions': v:false,
        \       'triggerParameterHints': v:true,
        \       'maxItems': 100,
        \     },
        \     'format': {
        \       'enable': v:true
        \     },
        \   },
        \ }
        \})
  augroup END
endif

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=number
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gh <plug>(lsp-hover)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gt <plug>(lsp-type-definition)
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

"
" asyncomplete.vim
"
"let g:asyncomplete_log_file = expand('~/asyncomplete.log')

inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<cr>"

imap <c-space> <Plug>(asyncomplete_force_refresh)

autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
