""
"" Plugins
""

call plug#begin('~/.vim/plugged')

""" Locate fzf plugin (brew, debian)
if filereadable("/usr/local/opt/fzf/plugin/fzf.vim")
  Plug '/usr/local/opt/fzf'
elseif filereadable("/usr/share/doc/fzf/examples/plugin/fzf.vim")
  Plug '/usr/share/doc/fzf/examples'
endif
"Plug 'frigoeu/psc-ide-vim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'dense-analysis/ale'
Plug 'elmcast/elm-vim'
Plug 'junegunn/fzf.vim'
Plug 'lumiliet/vim-twig'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'posva/vim-vue'
Plug 'purescript-contrib/purescript-vim'
Plug 'rhysd/committia.vim'
Plug 'scrooloose/nerdtree'
Plug 'tmhedberg/matchit'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-surround'
call plug#end()

filetype plugin indent on

""
"" Global Options
""

set autoindent
set autoread
set backspace=indent,eol,start
set breakindent
set clipboard^=unnamed,unnamedplus
set confirm
set copyindent
set cursorline
set encoding=utf-8
set formatoptions+=j
set hidden
set history=256
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set lazyredraw
set list
set listchars=tab:>·,trail:·,nbsp:~
set modelines=0
set mouse=a
set nobackup
set nojoinspaces
set path-=/usr/include
set preserveindent
set ruler
set scrolloff=3
set shell=zsh
set shortmess+=c "coc
set shortmess=at
set showbreak=+++
set showcmd
set showmatch
set signcolumn=number "coc
set smartcase
set smarttab
set spelllang=en_us
set tags=tags;~
set title
set ttyfast
set updatetime=300 "coc
set visualbell
set wildcharm=<C-Z>
set wildignore+=*.o,*.pyc
set wildmenu
set wildmode=list:longest

" Prefer rg (ripgrep) over grep
if executable("rg")
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
  set grepformat=%f:%l:%c:%m
endif

""
"" Mappings
""

let mapleader = ','

" Remap , (Reverse last character-search command) to \ (default leader)
noremap \ ,

" Scroll the viewport faster
nnoremap <C-E> 4<C-E>
nnoremap <C-Y> 4<C-Y>
vnoremap <C-E> 4<C-E>
vnoremap <C-Y> 4<C-Y>

" Stop highlighting in addition to clearing and redrawing the screen.
nnoremap <C-L> :<C-U>nohlsearch<CR><C-L>

""
"" Completion mappings
""

" Completing file names
inoremap <silent> <Leader>f <C-X><C-F>

" Completing keywords in the current and included files
inoremap <silent> <Leader>i <C-X><C-I>

" Completing whole lines
inoremap <silent> <Leader>l <C-X><C-L>

" Completing keywords in current file
inoremap <silent> <Leader>n <C-X><C-N>

" Omni completion
inoremap <silent> <Leader>o <C-X><C-O>

" Completing tags
inoremap <silent> <Leader>t <C-X><C-]>

" User defined completion
inoremap <silent> <Leader>u <C-X><C-U>

""
"" Mappings used frequently
""

"nnoremap <Leader>e :edit **/*<C-Z><S-Tab>
"nnoremap <Leader>f :find **/*<C-z><S-Tab>
nnoremap <Leader>stw :<C-U>call StripTrailingWhitespace()<CR>

" ALE
nnoremap <Leader>Af :ALEFix<CR>
"nmap <silent> <Leader>An <Plug>(ale_next_wrap)
"nmap <silent> <Leader>Ap <Plug>(ale_previous_wrap)

" fzf.vim
nnoremap <Leader>b :FzfBuffers<CR>
nnoremap <Leader>f :FzfFiles<CR>
nnoremap <Leader>g :FzfRg<SPACE>
nnoremap <Leader>h :FzfHelp<SPACE>
nnoremap <Leader>m :FzfMarks<CR>
nnoremap <Leader>t :FzfTags<CR>
nnoremap <silent>K :call SearchCurrentWordWithFzf()<CR>

" NERDTree
nnoremap <silent> <Leader>d :execute 'NERDTreeToggle ' . getcwd()<CR>

" Spell checking
nnoremap <Leader>s :set spell!<CR>

" Toggle pasting...
nnoremap <Leader>p :set paste!<CR>:set paste?<CR>

""
"" File type triggers
""

" Jump to last position in file after opening. Nice!
autocmd BufReadPost *
\ if line("'\"") > 0 && line("'\"") <= line("$") |
\   exe "normal! g`\"" |
\ endif

""
"" Colors
""

syntax on

let g:PaperColor_Theme_Options = {
  \   'theme': {
  \     'default': {
  \       'transparent_background': 1
  \     }
  \   }
  \ }

set background=light

colorscheme PaperColor

""
"" Commands
""

" ctags
command! MakeTags !ctags -R .

""
"" Plugins
""

" fzf.vim
let g:fzf_command_prefix = 'Fzf'

function! SearchCurrentWordWithFzf()
  execute 'FzfRg' expand('<cword>')
endfunction

"if (executable('rg'))
"  let $FZF_DEFAULT_COMMAND = 'rg --vimgrep --no-heading --smart-case'
"endif

" ALE
let g:ale_completion_enabled = 1
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']

" NERDTree
let g:NERDTreeIgnore = ['^__pycache__$', '\~$']

" netrw
" let g:netrw_altv=1
" let g:netrw_banner=0
" let g:netrw_browse_split=4
" let g:netrw_list_hide=netrw_gitignore#Hide()
" let g:netrw_liststyle=3

" CoC
let g:coc_global_extensions = [
  \ 'coc-css',
  \ 'coc-json',
  \ 'coc-phpls',
  \ 'coc-python',
  \ 'coc-snippets',
  \ 'coc-tailwindcss',
  \ 'coc-yaml',
  \ ]

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
"xmap <leader>f  <Plug>(coc-format-selected)
"nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
" xmap <leader>a  <Plug>(coc-codeaction-selected)
" nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
" nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
" nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
" xmap if <Plug>(coc-funcobj-i)
" omap if <Plug>(coc-funcobj-i)
" xmap af <Plug>(coc-funcobj-a)
" omap af <Plug>(coc-funcobj-a)
" xmap ic <Plug>(coc-classobj-i)
" omap ic <Plug>(coc-classobj-i)
" xmap ac <Plug>(coc-classobj-a)
" omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
" nmap <silent> <C-s> <Plug>(coc-range-select)
" xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
