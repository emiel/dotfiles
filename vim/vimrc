set nocompatible

call plug#begin('~/.vim/plugged')
Plug 'NLKNguyen/papercolor-theme'
Plug 'chase/vim-ansible-yaml'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'ervandew/supertab'
Plug 'gabrielelana/vim-markdown'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/fzf.vim'
Plug 'majutsushi/tagbar'
Plug 'rhysd/committia.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'tmhedberg/matchit'
call plug#end()

filetype plugin indent on

set autoindent
set backspace=indent,eol,start
set clipboard=unnamed
set confirm
set copyindent
set cursorline
set encoding=utf-8
set hidden
set history=256
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set modelines=0
set nobackup
set preserveindent
set ruler
set scrolloff=3
set shell=zsh
set shortmess=atI
set showbreak=+++
set showcmd
set showmatch
set showmode
set smartcase
set smartindent
" Auto reformat using (visual mode 'gq')
set textwidth=79
set title
set ttyfast
set viminfo='20,<50,s10,h,%
set visualbell
set wildmenu
set wildmode=list:longest

""
"" Color Scheme
""

colorscheme PaperColor
set background=dark
set t_Co=256
syntax on

""
"" Mapping
""

let mapleader = ","

" Clear highlight search
nnoremap <leader>n :nohlsearch<CR>

" Swap similar keys
nnoremap ' `
nnoremap ` '

" Scroll the viewport faster
nnoremap <c-e> 4<c-e>
nnoremap <c-y> 4<c-y>
vnoremap <c-e> 4<c-e>
vnoremap <c-y> 4<c-y>

" Show unwanted whitespace
set list
set listchars=tab:>·,trail:·,nbsp:~

" Catch trailing whitespace
nnoremap <leader>rtw :%s/\s\+$//e<CR>

" Jump to last position in file after opening. Nice!
autocmd BufReadPost *
\ if line("'\"") > 0 && line("'\"") <= line("$") |
\   exe "normal! g`\"" |
\ endif

" Tags
set tags=tags;~

" Spell checking
set spelllang=en_us
nmap <silent> <leader>s :set spell!<CR>
autocmd FileType gitcommit setlocal spell

" Mouse
set mouse=a

""
"" Plugins
""

" NERD Tree
map <silent> <leader>d :execute 'NERDTreeToggle ' . getcwd()<CR>

" tagbar
let g:tagbar_ctags_bin = "/usr/bin/ctags"
nnoremap <silent> <leader>t :TagbarOpenAutoClose<CR>
nnoremap <silent> <leader>T :TagbarToggle<CR>

" Ack (ack-grep)
let g:ackprg="ack-grep -H --nocolor --nogroup --column"

" lightline
let g:lightline = {
        \ 'colorscheme': 'PaperColor',
        \ }
