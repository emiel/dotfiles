""
"" Plugins
""

call plug#begin('~/.vim/plugged')
Plug 'NLKNguyen/papercolor-theme'
Plug 'chrisbra/matchit'
Plug 'dense-analysis/ale'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'leafgarland/typescript-vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'preservim/nerdtree'
Plug 'purescript-contrib/purescript-vim'
Plug 'rhysd/committia.vim'
Plug 'rhysd/vim-lsp-ale'
Plug 'rizzatti/dash.vim'
Plug 'shumphrey/fugitive-gitlab.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-surround'
call plug#end()

filetype plugin indent on

""
"" Global Options
""

set autoindent
set autoread
set backspace=indent,eol,start
set breakindent
set clipboard^=unnamed,unnamedplus
set completeopt=menuone,preview,noinsert,noselect
set confirm
set copyindent
set cursorline
set encoding=utf-8
set formatoptions+=j
set hidden
set history=1024
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set lazyredraw
set list
set listchars=tab:>·,trail:·,nbsp:~
set modelines=0
set mouse=a
set nobackup
set nojoinspaces
set path-=/usr/include
set preserveindent
set ruler
set scrolloff=3
set shell=zsh
set shortmess=atc
set showbreak=+++
set showcmd
set showmatch
set smartcase
set smarttab
set spelllang=en_us
set tags=tags;~
set termguicolors
set title
set ttyfast
set updatetime=1000
set visualbell
set wildcharm=<C-Z>
set wildignore+=*.o,*.pyc
set wildmenu
set wildmode=list:longest

" Prefer rg (ripgrep) over grep
if executable("rg")
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
  set grepformat=%f:%l:%c:%m
endif

""
"" Mappings
""

let mapleader = ','
" let maplocalleader = '-'

" Remap , (Reverse last character-search command) to \ (default leader)
noremap \ ,

" Scroll the viewport faster
nnoremap <C-E> 4<C-E>
nnoremap <C-Y> 4<C-Y>
vnoremap <C-E> 4<C-E>
vnoremap <C-Y> 4<C-Y>

" Stop highlighting in addition to clearing and redrawing the screen.
nnoremap <C-L> :<C-U>nohlsearch<CR><C-L>

""
"" Completion mappings
""

" Completing file names
"inoremap <silent> <Leader>f <C-X><C-F>

" Completing keywords in the current and included files
"inoremap <silent> <Leader>i <C-X><C-I>

" Completing whole lines
"inoremap <silent> <Leader>l <C-X><C-L>

" Completing keywords in current file
"inoremap <silent> <Leader>n <C-X><C-N>

" Omni completion
"inoremap <silent> <Leader>o <C-X><C-O>

" Completing tags
"inoremap <silent> <Leader>t <C-X><C-]>

" User defined completion
"inoremap <silent> <Leader>u <C-X><C-U>

""
"" Mappings used frequently
""

nnoremap <unique> <Leader>stw :<C-U>call StripTrailingWhitespace()<CR>

" ALE
nmap <unique> <Leader>Ad <Plug>(ale_detail)
nmap <unique> <C-j> <Plug>(ale_next_wrap)
nmap <unique> <C-k> <Plug>(ale_previous_wrap)

" Dash
nmap <unique> <silent> <leader>D <Plug>DashSearch

" fzf.vim
nnoremap <unique> <Leader>g :FzfRg<SPACE>
nnoremap <unique> <Leader>b :FzfBuffers<CR>
nnoremap <unique> <Leader>f :FzfFiles<CR>
nnoremap <unique> <Leader>h :FzfHelptags<CR>
nnoremap <unique> <silent>K :call SearchCurrentWordWithFzf()<CR>

" NERDTree
nnoremap <unique> <silent> <Leader>d :execute 'NERDTreeToggle ' . getcwd()<CR>
nnoremap <unique> <silent> <Leader>t :NERDTreeFind<CR>

" Spell checking
nnoremap <unique> <Leader>s :set spell!<CR>

" Toggle pasting
nnoremap <unique> <Leader>p :set paste!<CR>:set paste?<CR>

""
"" File type triggers
""

" Jump to last position in file after opening. Nice!
autocmd BufReadPost *
\ if line("'\"") > 0 && line("'\"") <= line("$") |
\   exe "normal! g`\"" |
\ endif

""
"" Colors
""

let g:PaperColor_Theme_Options = {
  \   'theme': {
  \     'default': {
  \       'transparent_background': 1
  \     }
  \   }
  \ }

syntax on

colorscheme PaperColor

""
"" Commands
""

" ctags
"command! MakeTags !ctags -R .

""
"" Plugin Configuration
""

"
" fzf.vim
"
let g:fzf_command_prefix = 'Fzf'

function! SearchCurrentWordWithFzf()
  execute 'FzfRg' expand('<cword>')
endfunction

if (executable('rg'))
  let $FZF_DEFAULT_COMMAND = 'rg --files  --hidden --glob "!{node_modules,.git}"'
endif

"
" ALE
"
let g:ale_completion_enabled = 0
let g:ale_disable_lsp = 1
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_fix_on_save = 1
let g:ale_lint_on_save = 0
let g:ale_sign_error = "E>"
let g:ale_sign_info = "I>"
let g:ale_sign_warning = "W>"

"
" NERDTree
"
let g:NERDTreeIgnore = ['^__pycache__$', '\~$']

"
" netrw
"
" let g:netrw_altv=1
" let g:netrw_banner=0
" let g:netrw_browse_split=4
" let g:netrw_list_hide=netrw_gitignore#Hide()
" let g:netrw_liststyle=3

"
" vim-lsp
"
let g:lsp_diagnostics_float_cursor = 1

" Disable "A> " (actions) from showing up in the sign column"
let g:lsp_document_code_action_signs_enabled = 0

let g:lsp_enable_lua = 1 " (has('lua') && has('patch-8.2.0775'))
let g:lsp_preview_float = has('patch-8.1.1517')
"let g:lsp_log_file = expand('~/vim-lsp.log')
"let g:lsp_log_verbose = 1


if executable('pylsp')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pylsp',
        \ 'cmd': ['pylsp'],
        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'pyproject.toml'))},
        \ 'allowlist': ['python'],
        \ })
endif

" if executable('pyright-langserver')
"     au User lsp_setup call lsp#register_server({
"         \ 'name': 'pyright-langserver',
"         \ 'cmd': ['pyright-langserver', '--stdio'],
"         \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'pyproject.toml'))},
"         \ 'allowlist': ['python'],
"         \ })
" endif

" if executable('purescript-language-server')
"     au User lsp_setup call lsp#register_server({
"         \ 'name': 'purescript-language-server',
"         \ 'cmd': ['purescript-language-server', '--stdio'],
"         \ 'allowlist': ['purescript'],
"         \ 'workspace_config': {
"             \ 'purescript.addNpmPath': v:true,
"             \ 'purescript.addSpagoSources': v:true,
"             \ 'purescript.buildCommand': 'spago build --purs-args --json-errors'
"         \ }
"         \ })
" endif

if executable('typescript-language-server')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'typescript-language-server',
        \ 'cmd': ['typescript-language-server', '--stdio'],
        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
        \ 'allowlist': ['typescript', 'typescript.tsx', 'typescriptreact'],
        \ })
endif

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=number
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gh <plug>(lsp-hover)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gt <plug>(lsp-type-definition)
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

"
" asyncomplete.vim
"
"let g:asyncomplete_log_file = expand('~/asyncomplete.log')

inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? asyncomplete#close_popup() : "\<cr>"

imap <c-space> <Plug>(asyncomplete_force_refresh)

autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

"
" NERDTree
"
" prevent other buffers replacing NERDTree in its window
autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif
