vim9script

#set verbose=9

##
## Plugins
##

plug#begin('~/.vim/plugged')
Plug 'LnL7/vim-nix'
Plug 'NLKNguyen/papercolor-theme'
Plug 'chrisbra/matchit'
Plug 'dense-analysis/ale'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'leafgarland/typescript-vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'preservim/nerdtree'
Plug 'purescript-contrib/purescript-vim'
Plug 'rhysd/committia.vim'
Plug 'rhysd/vim-healthcheck'
Plug 'rhysd/vim-lsp-ale'
Plug 'rizzatti/dash.vim'
Plug 'shumphrey/fugitive-gitlab.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-surround'
plug#end()

filetype plugin indent on

##
## Global Options
##

set autoindent
set autoread
set backspace=indent,eol,start
set breakindent
set clipboard^=unnamed,unnamedplus
set completeopt=menuone,longest,popup,noinsert,noselect
set confirm
set copyindent
set cursorline
set encoding=utf-8
set formatoptions+=j
set hidden
set history=1024
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set lazyredraw
set list
set listchars=tab:>·,trail:·,nbsp:~
set modelines=0
set mouse=a
set mousemodel=popup_setpos
set nobackup
set nojoinspaces
set path-=/usr/include
set preserveindent
set ruler
set scrolloff=3
set shell=zsh
set shortmess=atc
set showbreak=↳\ 
set showcmd
set showmatch
set smartcase
set smarttab
set spelllang=en_us
set statusline=%<%f\ %h%m%r%{FugitiveStatusline()}%=%-14.(%l,%c%V%)\ %P
set tags=tags;~
set termguicolors
set title
set ttyfast
set updatetime=1000
set visualbell
set wildignore+=*.o,*.pyc
set wildmenu
set wildmode=longest:full
set wildoptions=pum

# Prefer rg (ripgrep) over grep
if executable('rg')
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
  set grepformat=%f:%l:%c:%m
endif

##
## Mappings
##

g:mapleader = ','
g:localmapleader = '\'

# Remap , (Reverse last character-search command) to \ (default leader)
noremap \ ,

# Scroll the viewport faster
nnoremap <C-E> 4<C-E>
nnoremap <C-Y> 4<C-Y>
vnoremap <C-E> 4<C-E>
vnoremap <C-Y> 4<C-Y>

# Stop highlighting in addition to clearing and redrawing the screen.
nnoremap <C-L> :<C-U>nohlsearch<CR><C-L>

##
## Mappings used frequently
##

nnoremap <unique> <Leader>stw :<C-U>call StripTrailingWhitespace()<CR>

# ALE
nmap <unique> <Leader>Ad <Plug>(ale_detail)
nmap <unique> <C-j> <Plug>(ale_next_wrap)
nmap <unique> <C-k> <Plug>(ale_previous_wrap)

# Dash
nmap <unique> <silent> <leader>D <Plug>DashSearch

# fzf.vim
nnoremap <unique> <Leader>g :FzfRg<SPACE>
nnoremap <unique> <Leader>b :FzfBuffers<CR>
nnoremap <unique> <Leader>f :FzfFiles<CR>
nnoremap <unique> <Leader>h :FzfHelptags<CR>
nnoremap <unique> <silent>K :execute 'FzfRg' expand('<cword>')<CR>

# NERDTree
nnoremap <unique> <silent> <Leader>d :execute 'NERDTreeToggle' getcwd()<CR>
nnoremap <unique> <silent> <Leader>t :NERDTreeFind<CR>

# Spell checking
nnoremap <unique> <Leader>s :set spell!<CR>

# Toggle pasting
nnoremap <unique> <Leader>p :set paste!<CR>:set paste?<CR>

##
## Automatic commands
##

augroup vimrc
    # Remove all vimrc autocommands
    autocmd!

    # Jump to last position in file after opening. Nice!
    autocmd BufReadPost * {
        if line("'\"") > 0 && line("'\"") <= line('$')
            exe "normal! g`\""
        endif
    }
augroup END

##
## Colors
##

g:PaperColor_Theme_Options = {
  'theme': {
    'default': {
      'transparent_background': 1
    }
  }
}

syntax on

colorscheme PaperColor

##
## Commands
##

# ctags
#command! MakeTags !ctags -R .

##
## Plugin Configuration
##

#
# fzf.vim
#
g:fzf_command_prefix = 'Fzf'

if executable('rg')
  $FZF_DEFAULT_COMMAND = "rg --files  --hidden --glob '!{node_modules,.git}'"
endif

def FzfRgSuper(query: string, fullscreen: bool)
  const command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case -- %s || true'
  const initial_command = printf(command_fmt, shellescape(query))
  const reload_command = printf(command_fmt, '{q}')
  const spec = {'options': ['--phony', '--query', query, '--bind', 'change:reload:' .. reload_command]}

  fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), fullscreen)
enddef

command! -nargs=* -bang FzfRG call FzfRgSuper(<q-args>, <bang>0)

#
# ALE
#
g:ale_completion_enabled = 0
g:ale_virtualtext_cursor = 'current'
g:ale_disable_lsp = 1
g:ale_echo_msg_format = '[%linter%] %code: %%s'
g:ale_fix_on_save = 1
g:ale_lint_on_save = 0
g:ale_sign_error = 'E>'
g:ale_sign_info = 'I>'
g:ale_sign_warning = 'W>'

g:ale_python_reorder_python_imports_options = '--py39-plus'

#
# NERDTree
#
g:NERDTreeIgnore = ['^__pycache__$', '\~$']

#
# netrw
#
# g:netrw_altv=1
# g:netrw_banner=0
# g:netrw_browse_split=4
# g:netrw_list_hide=netrw_gitignore#Hide()
# g:netrw_liststyle=3

#
# vim-lsp
#
g:lsp_diagnostics_float_cursor = 1

# Setting to 1 breaks "Auto-import" in pyright
g:lsp_use_native_client = 0

# Disable 'A> ' (actions) from showing up in the sign column
g:lsp_document_code_action_signs_enabled = 0

g:lsp_enable_lua = 1
# g:lsp_log_file = expand('~/vim-lsp.log')
# g:lsp_log_verbose = 1

#
# Bug in pyright-langserver: You must set 'workspace_config' so a
# 'workspace/didChangeConfiguration' is sent! Not sure what the LSP protocol
# says about this.
#
if executable('pyright-langserver')
    def LspRegisterPython()
        lsp#register_server({
            'name': 'pyright-langserver',
            'cmd': ['pyright-langserver', '--stdio'],
            'root_uri': (server_info) => lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'pyproject.toml')),
            'initialization_options': v:null,
            'allowlist': ['python'],
            'workspace_config': {},
            'config': {},
        })
    enddef

    autocmd User lsp_setup LspRegisterPython()
endif

if executable('purescript-language-server')
    def LspRegisterPureScript()
        lsp#register_server({
            'name': 'purescript-language-server',
            'cmd': ['purescript-language-server', '--stdio'],
            'allowlist': ['purescript'],
            'workspace_config': {
                'purescript.addNpmPath': v:true,
                'purescript.addSpagoSources': v:true,
                'purescript.buildCommand': 'spago build --purs-args --json-errors'
            }
        })
    enddef

    autocmd User lsp_setup LspRegisterPureScript()
endif

if executable('typescript-language-server')
    def LspRegisterTypeScript()
        lsp#register_server({
            'name': 'typescript-language-server',
            'cmd': ['typescript-language-server', '--stdio'],
            'root_uri': (server_info) => lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json')),
            'allowlist': ['typescript', 'typescript.tsx', 'typescriptreact'],
         })
    enddef

    autocmd User lsp_setup LspRegisterTypeScript()
endif

def OnLspBufferEnabled()
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=number
    if exists('+tagfunc')
        setlocal tagfunc=lsp#tagfunc
    endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gh <plug>(lsp-hover)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gn <plug>(lsp-rename)
    nmap <buffer> gp <plug>(lsp-peek-definition)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gt <plug>(lsp-type-definition)
enddef

augroup lsp_install
    # Remove all lsp_install autocommands
    autocmd!

    # Invoke OnLspBufferEnabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled OnLspBufferEnabled()
augroup END

#
# asyncomplete.vim
#
# g:asyncomplete_log_file = expand('~/asyncomplete.log')

imap <C-@> <Plug>(asyncomplete_force_refresh)

au BufRead,BufNewFile */.github/*/*.y{,a}ml b:ale_linters = {'yaml': ['actionlint', 'prettier', 'yamllint']}
